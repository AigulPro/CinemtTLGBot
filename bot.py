import datetime
import pytz
import config
import prettytable as pt
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text
from apiParser import get_weather, get_weather_for_next_days
from keybords import *

bot = Bot(token=config.TOKEN_API_TELEGRAM)
dp = Dispatcher(bot=bot)
import html


# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class COORDINATES:
    def __init__(self, lon, lat):
        self.lon = lon
        self.lat = lat


COORDINATES_DATA = {}


# –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–≥–æ–¥—ã –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
def get_table(weather_data, weather_now):
    table = pt.PrettyTable(['–î–∞—Ç–∞', '¬∞C', '–û—â—É—â–∞–µ—Ç—Å—è'])
    table.align['–î–∞—Ç–∞'] = 'l'
    table.align['¬∞C'] = 'r'
    table.align['–û—â—É—â–∞–µ—Ç—Å—è'] = '—Å'

    data_now = datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")).strftime("%d.%m")
    data = [(data_now, int(weather_now.temperature), int(weather_now.temperature_feeling))]

    for i in weather_data:
        data.append(
            (datetime.datetime.strptime(i['dt_txt'], '%Y-%m-%d %H:%M:%S').strftime("%d.%m"), int(i['main']['temp']),
             int(i['main']['feels_like']))
        )

    for symbol, price, change in data:
        table.add_row([symbol, price, change])

    return table


# –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
def get_table_dop_info(weather_data, weather_now):
    table = pt.PrettyTable(['–ú–∏–Ω¬∞C', '–ú–∞–∫—Å¬∞C', '–í–µ—Ç–µ—Ä„éß'])
    table.align['–ú–∏–Ω ¬∞C'] = 'l'
    table.align['–ú–∞–∫—Å ¬∞C'] = 'r'
    table.align['–í–µ—Ç–µ—Ä „éß'] = '—Å'

    data = [(int(weather_now.min_temperature), int(weather_now.max_temperature), weather_now.wind_speed)]

    for i in weather_data:
        data.append(
            (int(i['main']['temp_min']), int(i['main']['temp_max']), i['wind']["speed"]),
        )

    for symbol, price, change in data:
        table.add_row([symbol, price, change])

    return table


# –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è—â—ã–∫–µ
def get_translate_direction(eng_word):
    translater = {
        'North': '–°–µ–≤–µ—Ä',
        'West': '–ó–∞–ø–∞–¥',
        'East': '–í–æ—Å—Ç–æ–∫',
        'South': '–Æ–≥',
    }
    return translater[eng_word]


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É start
@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç!\n–ü–æ–¥–µ–ª–∏—Å—å —Å–æ –º–Ω–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π!üïπ\n",
                         reply_markup=kb_start)


# –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Message):
    COORDINATES_DATA[message.from_user.id] = COORDINATES(message.location.longitude, message.location.latitude)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!', reply_markup=kb_menu)


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
@dp.message_handler(Text(equals="üåû –°–µ–≥–æ–¥–Ω—è"))
async def get_today_weather(message: types.Message):
    wthr = get_weather(COORDINATES_DATA[message.from_user.id])
    data_now = datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")).strftime("%d.%m.%Y")
    await message.answer(f'{data_now}\n{wthr.location}, {wthr.description}\n'
                         f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(wthr.temperature)}¬∞C\n–ü–æ –æ—â—É—â–µ–Ω–∏—è–º {int(wthr.temperature_feeling)}¬∞C',
                         reply_markup=inline_kb)


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
@dp.message_handler(Text(equals="üåö –ó–∞–≤—Ç—Ä–∞"))
async def get_today_weather(message: types.Message):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[message.from_user.id])
    date_weather = datetime.datetime.strptime(weather_data['dt_txt'], '%Y-%m-%d %H:%M:%S').strftime("%d.%m.%Y")
    location = get_weather(COORDINATES_DATA[message.from_user.id]).location
    await message.answer(f'–ó–∞–≤—Ç—Ä–∞ {date_weather}\n{location}, {weather_data["weather"][0]["description"]}\n'
                         f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {int(weather_data["main"]["temp"])}¬∞C\n'
                         f'–ü–æ –æ—â—É—â–µ–Ω–∏—è–º {int(weather_data["main"]["feels_like"])}¬∞C', reply_markup=inline_kb_tommorow)


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥—É –Ω–∞ 3 –¥–Ω—è
@dp.message_handler(Text(equals="üìÜ –ù–∞ 3 –¥–Ω—è"))
async def get_today_weather(message: types.Message):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[message.from_user.id], 3)
    weather_now = get_weather(COORDINATES_DATA[message.from_user.id])
    table = get_table(weather_data, weather_now)
    await message.answer(f'<pre>{table}</pre>', parse_mode=types.ParseMode.HTML, reply_markup=inline_kb_many_days)


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π
@dp.message_handler(Text(equals='üìÜ –ù–∞ 5 –¥–Ω–µ–π'))
async def get_tomorrow_weather(message: types.Message):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[message.from_user.id], 5)
    weather_now = get_weather(COORDINATES_DATA[message.from_user.id])
    table = get_table(weather_data, weather_now)
    await message.answer(f'<pre>{table}</pre>', parse_mode=types.ParseMode.HTML, reply_markup=inline_kb_many_5days)

@dp.callback_query_handler(text='sunrise')
async def process_callback_button1(callback_query: types.CallbackQuery):
    weather_now = get_weather(COORDINATES_DATA[callback_query.from_user.id])
    await callback_query.message.answer(
        f'–í–æ—Å—Ö–æ–¥ :{weather_now.sunrise.strftime("%H:%M:%S")}\n–ó–∞–∫–∞—Ç :{weather_now.sunset.strftime("%H:%M:%S")}')
    await callback_query.answer()



# –†–∞–±–æ—Ç–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π---------------------------------------------------------------------------------

# –í—ã–≤–æ–ª —Å–æ–ª–Ω—Ü–∞ –¥–ª—è "—Å–µ–≥–æ–¥–Ω—è"
@dp.callback_query_handler(text='sunrise')
async def process_callback_button1(callback_query: types.CallbackQuery):
    weather_now = get_weather(COORDINATES_DATA[callback_query.from_user.id])
    await callback_query.message.answer(
        f'–í–æ—Å—Ö–æ–¥ :{weather_now.sunrise.strftime("%H:%M:%S")}\n–ó–∞–∫–∞—Ç :{weather_now.sunset.strftime("%H:%M:%S")}')
    await callback_query.answer()


# –≤—ã–≤–æ–¥ –≤–µ—Ç—Ä–∞ –¥–ª—è "—Å–µ–≥–æ–¥–Ω—è"
@dp.callback_query_handler(text='wind')
async def process_callback_today(callback_query: types.CallbackQuery):
    weather_now = get_weather(COORDINATES_DATA[callback_query.from_user.id])
    await callback_query.message.answer(
        f'–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ :{get_translate_direction(weather_now.wind_direction)}\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞ :{weather_now.wind_speed}–º/—Å')
    await callback_query.answer()


# –í—ã–≤–æ–ª –ø–æ–¥—Ä–æ–±–Ω–µ–µ –¥–ª—è "–∑–∞–≤—Ç—Ä–∞"
@dp.callback_query_handler(text='dop_info')
async def process_callback_tommorow(callback_query: types.CallbackQuery):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[callback_query.from_user.id])
    date_weather = datetime.datetime.strptime(weather_data['dt_txt'], '%Y-%m-%d %H:%M:%S').strftime("%d.%m.%Y")
    await callback_query.message.answer(
        f'–ú–∏–Ω.—Ç–µ–º–ø:{int(weather_data["main"]["temp_min"])}¬∞C\n'
        f'–ú–∞–∫—Å.—Ç–µ–º–ø:{int(weather_data["main"]["temp_min"])}¬∞C\n'
        f'–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞:{weather_data["wind"]["speed"]}–º/—Å')
    await callback_query.answer()


# –í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –¥–ª—è "3 –¥–Ω–µ–π"
@dp.callback_query_handler(text='dop_info_table')
async def get_tomorrow_weather(callback_query: types.CallbackQuery):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[callback_query.from_user.id], 3)
    weather_now = get_weather(COORDINATES_DATA[callback_query.from_user.id])
    table = get_table_dop_info(weather_data, weather_now)
    await callback_query.message.answer(f'<pre>{table}</pre>', parse_mode=types.ParseMode.HTML)
    await callback_query.answer()


# –í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –¥–ª—è "5 –¥–Ω–µ–π"
@dp.callback_query_handler(text='dop_info_5table')
async def get_tomorrow_weather(callback_query: types.CallbackQuery):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[callback_query.from_user.id], 5)
    weather_now = get_weather(COORDINATES_DATA[callback_query.from_user.id])
    table = get_table_dop_info(weather_data, weather_now)
    await callback_query.message.answer(f'<pre>{table}</pre>', parse_mode=types.ParseMode.HTML)
    await callback_query.answer()
