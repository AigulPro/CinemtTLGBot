import datetime
import pytz
import prettytable as pt
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

import config
from apiParser import get_weather, get_weather_for_next_days

bot = Bot(token=config.TOKEN_API_TELEGRAM)
dp = Dispatcher(bot=bot)
import html


# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class COORDINATES:
    def __init__(self, lon, lat):
        self.lon = lon
        self.lat = lat


COORDINATES_DATA = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb_start = ReplyKeyboardMarkup(resize_keyboard=True)
kb_start.add(KeyboardButton('üïπ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ì–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', request_location=True))

kb_menu = ReplyKeyboardMarkup(resize_keyboard=True)
kb_menu.add(KeyboardButton('üåû –°–µ–≥–æ–¥–Ω—è'))
kb_menu.insert(KeyboardButton('üåö –ó–∞–≤—Ç—Ä–∞'))
kb_menu.add(KeyboardButton('üìÜ –ù–∞ 3 –¥–Ω—è'))
kb_menu.insert(KeyboardButton('üìÜ –ù–∞ 5 –¥–Ω–µ–π'))
kb_menu.add(KeyboardButton('üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É start
@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    await message.answer("  –ü—Ä–∏–≤–µ—Ç!\n –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π!üïπ\n –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞! üåÜ",
                         reply_markup=kb_start)


# –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Message):
    COORDINATES_DATA[message.from_user.id] = COORDINATES(message.location.longitude, message.location.latitude)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!', reply_markup=kb_menu)


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
@dp.message_handler(Text(equals="üåû –°–µ–≥–æ–¥–Ω—è"))
async def get_today_weather(message: types.Message):
    wthr = get_weather(COORDINATES_DATA[message.from_user.id])
    data_now = datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")).strftime("%d.%m.%Y")
    await message.answer(f'{data_now}\n{wthr.location}, {wthr.description}\n'
                         f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {wthr.temperature}¬∞C\n –ü–æ –æ—â—É—â–µ–Ω–∏—è–º {wthr.temperature_feeling}¬∞C')


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
@dp.message_handler(Text(equals="üåö –ó–∞–≤—Ç—Ä–∞"))
async def get_today_weather(message: types.Message):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[message.from_user.id])
    date_weather = datetime.datetime.strptime(weather_data['dt_txt'], '%Y-%m-%d %H:%M:%S').strftime("%d.%m.%Y")
    location = get_weather(COORDINATES_DATA[message.from_user.id]).location
    await message.answer(f'–ó–∞–≤—Ç—Ä–∞ {date_weather}\n {location}, {weather_data["weather"][0]["description"]}\n'
                         f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data["main"]["temp"]}¬∞C\n'
                         f' –ü–æ –æ—â—É—â–µ–Ω–∏—è–º {weather_data["main"]["feels_like"]}¬∞C')


def get_table(weather_data, weather_now):
    table = pt.PrettyTable(['–î–∞—Ç–∞', '¬∞C', '–û—â—É—â–∞–µ—Ç—Å—è'])
    table.align['–î–∞—Ç–∞'] = 'l'
    table.align['¬∞C'] = 'r'
    table.align['–û—â—É—â–∞–µ—Ç—Å—è'] = '—Å'

    data_now = datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")).strftime("%d.%m")
    data = [(data_now, int(weather_now.temperature), int(weather_now.temperature_feeling))]

    for i in weather_data:
        data.append(
            (datetime.datetime.strptime(i['dt_txt'], '%Y-%m-%d %H:%M:%S').strftime("%d.%m"), int(i['main']['temp']),
             int(i['main']['feels_like']))
        )

    for symbol, price, change in data:
        table.add_row([symbol, price, change])

    return table


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥—É –Ω–∞ 3 –¥–Ω—è
@dp.message_handler(Text(equals="üìÜ –ù–∞ 3 –¥–Ω—è"))
async def get_today_weather(message: types.Message):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[message.from_user.id], 3)
    weather_now = get_weather(COORDINATES_DATA[message.from_user.id])
    table = get_table(weather_data, weather_now)
    await message.answer(f'<pre>{table}</pre>', parse_mode=types.ParseMode.HTML)


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π
@dp.message_handler(Text(equals='üìÜ –ù–∞ 5 –¥–Ω–µ–π'))
async def get_tomorrow_weather(message: types.Message):
    weather_data = get_weather_for_next_days(COORDINATES_DATA[message.from_user.id], 5)
    weather_now = get_weather(COORDINATES_DATA[message.from_user.id])
    table = get_table(weather_data, weather_now)
    await message.answer(f'<pre>{table}</pre>', parse_mode=types.ParseMode.HTML)
