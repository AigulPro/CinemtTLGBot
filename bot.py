import time, datetime, pytz
import logging
from dataclasses import dataclass

from aiogram.dispatcher.filters import Text

import config
import requests
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apiParser import get_weather

bot = Bot(token=config.TOKEN_API_TELEGRAM)
dp = Dispatcher(bot=bot)


# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class COORDINATES:
    def __init__(self, lon, lat):
        self.lon = lon
        self.lat = lat


COORDINATES_DATA = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
kb_start = ReplyKeyboardMarkup(resize_keyboard=True)
kb_start.add(KeyboardButton('üïπ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ì–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π', request_location=True))

kb_menu = ReplyKeyboardMarkup(resize_keyboard=True)
kb_menu.add(KeyboardButton('üåû –°–µ–≥–æ–¥–Ω—è'))
kb_menu.insert(KeyboardButton('üåö –ó–∞–≤—Ç—Ä–∞'))
kb_menu.add(KeyboardButton('üìÜ –ù–∞ 5 –¥–Ω–µ–π'))
kb_menu.insert(KeyboardButton('üìÜ –ù–∞ 7 –¥–Ω–µ–π'))
kb_menu.insert(KeyboardButton('üìÜ –ù–∞ 10 –¥–Ω–µ–π'))
kb_menu.add(KeyboardButton('üõ† –ù–∞—Å—Ç—Ä–æ–π–∫–∏'))


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ—Ç–æ—Ä—ã–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É start
@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    print('I say hello!')
    await message.answer("  –ü—Ä–∏–≤–µ—Ç!\n –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Å—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π!üïπ\n –ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞! üåÜ",
                         reply_markup=kb_start)


# –ü–æ–ª—É—á–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ
@dp.message_handler(content_types=['location'])
async def handle_location(message: types.Message):
    COORDINATES_DATA[message.from_user.id] = COORDINATES(message.location.longitude
                                                         , message.location.latitude)
    print(COORDINATES_DATA)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ!', reply_markup=kb_menu)


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
@dp.message_handler(Text(equals="üåû –°–µ–≥–æ–¥–Ω—è"))
async def get_today_weather(message: types.Message):
    wthr = get_weather(COORDINATES_DATA[message.from_user.id])
    data_now = datetime.datetime.now(tz=pytz.timezone("Asia/Yekaterinburg")).strftime("%Y-%m-%d")
    await message.answer(f'{data_now}\n{wthr.location}, {wthr.description}\n' \
                         f'–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {wthr.temperature}¬∞C\n –ü–æ –æ—â—É—â–µ–Ω–∏—è–º {wthr.temperature_feeling}¬∞C')


# –í—ã–≤–æ–¥–∏–º –ø–æ–≥–æ–¥—É –Ω–∞ 5 –¥–Ω–µ–π
@dp.message_handler(Text(equals='üìÜ –ù–∞ 5 –¥–Ω–µ–π'))
async def get_tomorrow_weather(message: types.Message):
    coord = COORDINATES_DATA[message.from_user.id]
    url = config.FIVE_DAYS_WEATHER_API_CALL.format(latitude=coord.lat, longitude=coord.lon)
    result = requests.get(url)
    print(result.json())
    await message.answer('–£—Å–ø–µ—Ö!', reply_markup=kb_menu)
